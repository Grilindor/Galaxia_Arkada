{"ast":null,"code":"var _jsxFileName = \"/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Restaurer l'utilisateur à partir de sessionStorage au chargement de l'application\n  useEffect(() => {\n    const login = async (Email, password) => {\n      console.log(\"Tentative de connexion avec\", {\n        Email,\n        password\n      }); // Débogage\n\n      // Vérification si l'Email ou le mot de passe est manquant\n      if (!Email || !password) {\n        console.error(\"Email ou mot de passe manquant.\");\n        setError(\"Veuillez entrer un email et un mot de passe.\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:3000/api/users/signin\", {\n          email: Email,\n          password: password\n        });\n        console.log(\"Réponse du serveur :\", response);\n        const data = response.data;\n        console.log(\"Données reçues du serveur :\", data);\n        if (response.status === 200) {\n          console.log(\"Connexion réussie, utilisateur :\", data.user);\n          setUser(data.user); // Stocker l'utilisateur côté frontend\n          sessionStorage.setItem(\"token\", data.accessToken); // Stocker le token dans sessionStorage\n        } else {\n          console.warn(\"Nom d'utilisateur ou mot de passe incorrect.\");\n          setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n        }\n      } catch (error) {\n        console.error(\"Erreur de connexion :\", error);\n        setError(error.message);\n      }\n    };\n    const token = sessionStorage.getItem(\"token\");\n    if (token) {\n      // Récupérer toutes les informations utilisateur depuis l'API du backend avec Axios\n      axios.get(\"http://localhost:3000/api/user/Profile\", {\n        headers: {\n          Authorization: `Bearer ${token}` // Ajouter le token JWT dans les headers\n        }\n      }).then(response => {\n        const data = response.data;\n        if (data) {\n          setUser(data); // Stocker toutes les informations utilisateur dans l'état\n          sessionStorage.setItem(\"user\", JSON.stringify(data)); // Stocker éventuellement l'utilisateur (pas recommandé, selon tes besoins)\n        } else {\n          console.error(\"Erreur lors de la récupération des informations utilisateur\");\n        }\n      }).catch(err => {\n        console.error(\"Erreur lors de la récupération des informations utilisateur\", err);\n      });\n    }\n  }, []);\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"token\"); // Supprimer le token de sessionStorage\n    sessionStorage.removeItem(\"user\"); // Supprimer les informations utilisateur\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"BvsgUh7hIr9lcbL3JkaL4zQs1nU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return React.useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","error","setError","login","Email","password","console","log","response","post","email","data","status","sessionStorage","setItem","accessToken","warn","message","token","getItem","get","headers","Authorization","then","JSON","stringify","catch","err","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Restaurer l'utilisateur à partir de sessionStorage au chargement de l'application\n  useEffect(() => {\n\n\n  const login = async (Email, password) => {\n    console.log(\"Tentative de connexion avec\", { Email, password }); // Débogage\n\n    // Vérification si l'Email ou le mot de passe est manquant\n    if (!Email || !password) {\n      console.error(\"Email ou mot de passe manquant.\");\n      setError(\"Veuillez entrer un email et un mot de passe.\");\n      return;\n    }\n\n    try {\n      const response = await axios.post(\"http://localhost:3000/api/users/signin\", {\n        email: Email,\n        password: password,\n      });\n\n      console.log(\"Réponse du serveur :\", response);\n\n      const data = response.data;\n      console.log(\"Données reçues du serveur :\", data);\n\n      if (response.status === 200) {\n        console.log(\"Connexion réussie, utilisateur :\", data.user);\n        setUser(data.user); // Stocker l'utilisateur côté frontend\n        sessionStorage.setItem(\"token\", data.accessToken); // Stocker le token dans sessionStorage\n      } else {\n        console.warn(\"Nom d'utilisateur ou mot de passe incorrect.\");\n        setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      setError(error.message);\n    }\n  };\n\n  const token = sessionStorage.getItem(\"token\");\n\n    if (token) {\n      // Récupérer toutes les informations utilisateur depuis l'API du backend avec Axios\n      axios\n        .get(\"http://localhost:3000/api/user/Profile\", {\n          headers: {\n            Authorization: `Bearer ${token}`, // Ajouter le token JWT dans les headers\n          },\n        })\n        .then((response) => {\n          const data = response.data;\n          if (data) {\n            setUser(data); // Stocker toutes les informations utilisateur dans l'état\n            sessionStorage.setItem(\"user\", JSON.stringify(data)); // Stocker éventuellement l'utilisateur (pas recommandé, selon tes besoins)\n          } else {\n            console.error(\"Erreur lors de la récupération des informations utilisateur\");\n          }\n        })\n        .catch((err) => {\n          console.error(\"Erreur lors de la récupération des informations utilisateur\", err);\n        });\n    }\n  }, []);\n\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"token\"); // Supprimer le token de sessionStorage\n    sessionStorage.removeItem(\"user\"); // Supprimer les informations utilisateur\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, error }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return React.useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}