{"ast":null,"code":"var _jsxFileName = \"/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Fonction login\n  const login = async (Email, password) => {\n    console.log(\"Tentative de connexion avec\", {\n      Email,\n      password\n    });\n    if (!Email || !password) {\n      console.error(\"Email ou mot de passe manquant.\");\n      setError(\"Veuillez entrer un email et un mot de passe.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:3000/api/users/signin\", {\n        email: Email,\n        password: password\n      });\n      const data = response.data;\n      if (response.status === 200) {\n        console.log(\"Connexion réussie, utilisateur :\", data.user);\n        setUser(data.user);\n        sessionStorage.setItem(\"token\", data.accessToken);\n\n        // Après la connexion, on peut récupérer plus d'infos sur l'utilisateur\n        fetchUserData(data.accessToken);\n      } else {\n        setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      setError(error.message);\n    }\n  };\n\n  // Fonction pour récupérer les informations de l'utilisateur\n  const fetchUserData = token => {\n    axios.get(\"http://localhost:3000/api/user/Profile\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      const data = response.data;\n      if (data) {\n        setUser(data);\n        sessionStorage.setItem(\"user\", JSON.stringify(data));\n      }\n    }).catch(err => {\n      console.error(\"Erreur lors de la récupération des informations utilisateur\", err);\n    });\n  };\n\n  // Restaurer l'utilisateur à partir de sessionStorage au chargement de l'application\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"token\");\n    if (token) {\n      fetchUserData(token);\n    }\n  }, []);\n\n  // Fonction logout\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"user\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"BvsgUh7hIr9lcbL3JkaL4zQs1nU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["AuthProvider","children","_s","user","setUser","useState","error","setError","login","Email","password","console","log","response","axios","post","email","data","status","sessionStorage","setItem","accessToken","fetchUserData","message","token","get","headers","Authorization","then","JSON","stringify","catch","err","useEffect","getItem","logout","removeItem","_jsxDEV","AuthContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js"],"sourcesContent":["export const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Fonction login\n  const login = async (Email, password) => {\n    console.log(\"Tentative de connexion avec\", { Email, password });\n\n    if (!Email || !password) {\n      console.error(\"Email ou mot de passe manquant.\");\n      setError(\"Veuillez entrer un email et un mot de passe.\");\n      return;\n    }\n\n    try {\n      const response = await axios.post(\"http://localhost:3000/api/users/signin\", {\n        email: Email,\n        password: password,\n      });\n\n      const data = response.data;\n\n      if (response.status === 200) {\n        console.log(\"Connexion réussie, utilisateur :\", data.user);\n        setUser(data.user);\n        sessionStorage.setItem(\"token\", data.accessToken);\n\n        // Après la connexion, on peut récupérer plus d'infos sur l'utilisateur\n        fetchUserData(data.accessToken);\n      } else {\n        setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      setError(error.message);\n    }\n  };\n\n  // Fonction pour récupérer les informations de l'utilisateur\n  const fetchUserData = (token) => {\n    axios\n      .get(\"http://localhost:3000/api/user/Profile\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        const data = response.data;\n        if (data) {\n          setUser(data);\n          sessionStorage.setItem(\"user\", JSON.stringify(data));\n        }\n      })\n      .catch((err) => {\n        console.error(\"Erreur lors de la récupération des informations utilisateur\", err);\n      });\n  };\n\n  // Restaurer l'utilisateur à partir de sessionStorage au chargement de l'application\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"token\");\n    if (token) {\n      fetchUserData(token);\n    }\n  }, []);\n\n  // Fonction logout\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"user\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, error }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}