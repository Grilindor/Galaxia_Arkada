{"ast":null,"code":"var _jsxFileName = \"/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Fonction pour gérer le login\n  const login = async (email, password) => {\n    console.log(\"Tentative de connexion avec\", {\n      email,\n      password\n    });\n    if (!email || !password) {\n      console.error(\"Email ou mot de passe manquant.\");\n      setError(\"Veuillez entrer un email et un mot de passe.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:3000/api/users/signin\", {\n        email,\n        password\n      });\n      console.log(\"Réponse du serveur :\", response);\n      const data = response.data;\n      if (response.status === 200) {\n        console.log(\"Connexion réussie, utilisateur :\", data.user);\n        setProfile(data.user); // Stocker l'utilisateur côté frontend\n        sessionStorage.setItem(\"token\", data.accessToken); // Stocker le token dans sessionStorage\n        console.log(\"Token stocké dans sessionStorage:\", data.accessToken);\n      } else {\n        console.warn(\"Nom d'utilisateur ou mot de passe incorrect.\");\n        setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      setError(\"Une erreur est survenue lors de la connexion.\");\n      throw error; // Propager l'erreur pour la gérer dans le composant Login\n    }\n  };\n\n  // Fonction pour récupérer les informations utilisateur après connexion\n  const fetchUserData = async () => {\n    const token = sessionStorage.getItem(\"token\");\n    if (!token) {\n      console.log(\"Aucun token trouvé, utilisateur non connecté.\");\n      return;\n    }\n    try {\n      const response = await axios.get(\"http://localhost:3000/api/user/Profile\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = response.data;\n      console.log(\"Réponse du serveur pour les infos utilisateur :\", data);\n      //setUser(data); remplacer comment on le définie\n      sessionStorage.setItem(\"user\", JSON.stringify(data));\n    } catch (err) {\n      console.error(\"Erreur lors de la récupération des informations utilisateur\", err);\n    }\n  };\n\n  // Fonction pour gérer le logout\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"user\");\n    console.log(\"Token et utilisateur supprimés de sessionStorage\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      error,\n      fetchUserData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"aLtBmhcTZ6Pg/73X5ygmhbR8Yp4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  console.log(\"useAuth appelé\");\n  return React.useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","error","setError","login","email","password","console","log","response","post","data","status","setProfile","sessionStorage","setItem","accessToken","warn","fetchUserData","token","getItem","get","headers","Authorization","JSON","stringify","err","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Fonction pour gérer le login\n  const login = async (email, password) => {\n    console.log(\"Tentative de connexion avec\", { email, password });\n    if (!email || !password) {\n      console.error(\"Email ou mot de passe manquant.\");\n      setError(\"Veuillez entrer un email et un mot de passe.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\n        \"http://localhost:3000/api/users/signin\",\n        { email, password }\n      );\n      console.log(\"Réponse du serveur :\", response);\n      const data = response.data;\n\n      if (response.status === 200) {\n        console.log(\"Connexion réussie, utilisateur :\", data.user);\n        setProfile(data.user); // Stocker l'utilisateur côté frontend\n        sessionStorage.setItem(\"token\", data.accessToken); // Stocker le token dans sessionStorage\n        console.log(\"Token stocké dans sessionStorage:\", data.accessToken);\n      } else {\n        console.warn(\"Nom d'utilisateur ou mot de passe incorrect.\");\n        setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      setError(\"Une erreur est survenue lors de la connexion.\");\n      throw error; // Propager l'erreur pour la gérer dans le composant Login\n    }\n  };\n\n  // Fonction pour récupérer les informations utilisateur après connexion\n  const fetchUserData = async () => {\n    const token = sessionStorage.getItem(\"token\");\n    if (!token) {\n      console.log(\"Aucun token trouvé, utilisateur non connecté.\");\n      return;\n    }\n\n    try {\n      const response = await axios.get(\"http://localhost:3000/api/user/Profile\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const data = response.data;\n      console.log(\"Réponse du serveur pour les infos utilisateur :\", data);\n      //setUser(data); remplacer comment on le définie\n      sessionStorage.setItem(\"user\", JSON.stringify(data));\n    } catch (err) {\n      console.error(\"Erreur lors de la récupération des informations utilisateur\", err);\n    }\n  };\n\n  // Fonction pour gérer le logout\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"user\");\n    console.log(\"Token et utilisateur supprimés de sessionStorage\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, error, fetchUserData }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  console.log(\"useAuth appelé\");\n  return React.useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}