const db = require("../models");
const Game = db.game;
const Tag = db.tag;
const path = require("path");
const fs = require("fs");
const unzipper = require("unzipper");

const submitGameWithTags = async (req, res) => {
    let zipFile = null;
    let gameImage = null;

    try {
        console.log("üì• Request Body:", req.body);
        console.log("üìÇ Uploaded Files:", req.files);

        // V√©rification et r√©cup√©ration des fichiers
        zipFile = req.files.zipFile ? req.files.zipFile[0] : null;
        gameImage = req.files.gameImage ? req.files.gameImage[0].path : null;

        // V√©rification du format d'image
        if (gameImage && !gameImage.endsWith(".png")) {
            fs.unlinkSync(gameImage);
            return res.status(400).json({ message: "Seuls les fichiers PNG sont autoris√©s." });
        }

        // Cr√©ation du jeu en base sans le champ extractedPath (ajout√© apr√®s extraction)
        const gameData = {
            name: req.body.name,
            description: req.body.description,
            developer: req.body.developer,
            filePath: zipFile ? zipFile.path : null,
            gameEngine: req.body.gameEngine,
            platform: req.body.platform,
            imagePath: gameImage,
        };

        console.log("‚úÖ Game Data:", gameData);

        const game = await Game.create(gameData);
        console.log("‚úÖ Game Created:", game.dataValues);

        // üîÑ D√©but de l'extraction du fichier ZIP
        console.log("üîç Extraction en cours...");
        const extractedPath = await gameExtractAndSave(zipFile);
        console.log(`‚úÖ Extraction r√©ussie, chemin obtenu : ${extractedPath}`);

        // üîπ Mise √† jour du jeu avec le chemin extrait
        game.extractedPath = extractedPath;
        await game.save();
        console.log("‚úÖ Jeu mis √† jour avec le chemin extrait:", game.extractedPath);

        // Gestion des tags
        const tagsData = Array.isArray(req.body.tags) ? req.body.tags : [];
        console.log("üè∑Ô∏è Tags re√ßus:", tagsData);

        const tags = await Promise.all(tagsData.map(async (tagName) => {
            const [tag, created] = await Tag.findOrCreate({ where: { name: tagName } });
            console.log(`üè∑Ô∏è Tag trait√©: ${tagName} (Nouveau: ${created})`);
            return tag;
        }));

        // Associer les tags au jeu
        await game.setTags(tags);
        console.log("‚úÖ Tags associ√©s au jeu:", tags.map(tag => tag.name));

        res.status(201).json({ message: 'üéÆ Jeu cr√©√© avec succ√®s avec ses tags', game });
    } catch (error) {
        console.error("‚ùå Erreur dans submitGameWithTags:", error);

        if (zipFile) fs.unlinkSync(zipFile.path);
        if (gameImage) fs.unlinkSync(gameImage);

        res.status(500).json({ message: '‚ùå Erreur lors de la cr√©ation du jeu', error: error.message });
    }
};

const gameExtractAndSave = async (zipFile) => {
    try {
        if (!zipFile) throw new Error("‚ö†Ô∏è Aucun fichier .zip fourni.");

        const extractedFolderPath = path.join(__dirname, "../../../Extracted_Games");

        if (!fs.existsSync(extractedFolderPath)) {
            fs.mkdirSync(extractedFolderPath, { recursive: true });
            console.log(`üìÅ Dossier cr√©√©: ${extractedFolderPath}`);
        }

        const originalName = path.basename(zipFile.originalname, ".zip");
        const gameExtractedPath = path.join(extractedFolderPath, originalName);

        if (fs.existsSync(gameExtractedPath)) {
            throw new Error(`‚ö†Ô∏è Un jeu avec le nom \"${originalName}\" existe d√©j√†.`);
        }

        console.log(`üìÇ D√©but de l'extraction vers: ${gameExtractedPath}`);

        await new Promise((resolve, reject) => {
            fs.createReadStream(zipFile.path)
                .pipe(unzipper.Extract({ path: gameExtractedPath }))
                .on("close", () => {
                    console.log(`‚úÖ Extraction termin√©e avec succ√®s: ${gameExtractedPath}`);
                    resolve();
                })
                .on("error", (err) => {
                    console.error("‚ùå Erreur lors de l'extraction:", err);
                    reject(new Error("√âchec de l'extraction du jeu."));
                });
        });

        return `Extracted_Games/${originalName}`;
    } catch (error) {
        console.error("‚ùå Erreur lors de l'extraction du jeu:", error);
        throw new Error("√âchec de l'extraction du jeu.");
    }
};

module.exports = { submitGameWithTags, gameExtractAndSave };
