{"ast":null,"code":"var _jsxFileName = \"/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Restaurer l'utilisateur à partir de sessionStorage au chargement de l'application\n  useEffect(() => {\n    const storedUser = sessionStorage.getItem(\"user\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser)); // Restaurer l'utilisateur\n    }\n  }, []);\n  const login = async (Email, password) => {\n    console.log(\"Tentative de connexion avec\", {\n      Email,\n      password\n    }); // Débogage\n\n    // Vérification si l'Email ou le mot de passe est manquant\n    if (!Email || !password) {\n      console.error(\"Email ou mot de passe manquant.\");\n      setError(\"Veuillez entrer un email et un mot de passe.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:3000/api/users/signin\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: Email,\n          password: password\n        })\n      });\n      console.log(\"Réponse du serveur :\", response);\n      const data = await response.json();\n      console.log(\"Données reçues du serveur :\", data);\n      if (!response.ok) {\n        console.error(\"Erreur de réponse du serveur :\", data.message);\n        setError(data.message || \"Erreur de connexion\");\n        return;\n      }\n      if (data.success) {\n        console.log(\"Connexion réussie, utilisateur :\", data.user);\n        setUser(data.user);\n        sessionStorage.setItem(\"user\", JSON.stringify(data.user)); // Stocker l'utilisateur\n      } else {\n        console.warn(\"Nom d'utilisateur ou mot de passe incorrect.\");\n        setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      setError(error.message);\n    }\n  };\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"user\"); // Supprimer l'utilisateur de sessionStorage\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"BvsgUh7hIr9lcbL3JkaL4zQs1nU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return React.useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","error","setError","storedUser","sessionStorage","getItem","JSON","parse","login","Email","password","console","log","response","fetch","method","headers","body","stringify","email","data","json","ok","message","success","setItem","warn","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["/home/mass2070/Galaxia_Arkada/GA_V_0.2.5/frontend/src/Page/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Restaurer l'utilisateur à partir de sessionStorage au chargement de l'application\n  useEffect(() => {\n    const storedUser = sessionStorage.getItem(\"user\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser)); // Restaurer l'utilisateur\n    }\n  }, []);\n\n  const login = async (Email, password) => {\n    console.log(\"Tentative de connexion avec\", { Email, password }); // Débogage\n\n    // Vérification si l'Email ou le mot de passe est manquant\n    if (!Email || !password) {\n      console.error(\"Email ou mot de passe manquant.\");\n      setError(\"Veuillez entrer un email et un mot de passe.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"http://localhost:3000/api/users/signin\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email: Email, password: password }),\n      });\n\n      console.log(\"Réponse du serveur :\", response);\n\n      const data = await response.json();\n      console.log(\"Données reçues du serveur :\", data);\n\n      if (!response.ok) {\n        console.error(\"Erreur de réponse du serveur :\", data.message);\n        setError(data.message || \"Erreur de connexion\");\n        return;\n      }\n\n      if (data.success) {\n        console.log(\"Connexion réussie, utilisateur :\", data.user);\n        setUser(data.user);\n        sessionStorage.setItem(\"user\", JSON.stringify(data.user)); // Stocker l'utilisateur\n      } else {\n        console.warn(\"Nom d'utilisateur ou mot de passe incorrect.\");\n        setError(\"Nom d'utilisateur ou mot de passe incorrect.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      setError(error.message);\n    }\n  };\n\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur :\", user);\n    setUser(null);\n    sessionStorage.removeItem(\"user\"); // Supprimer l'utilisateur de sessionStorage\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, error }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return React.useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}